name: 'build-apps'

on: workflow_dispatch

jobs:
  build-binaries:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          profile: minimal
          toolchain: nightly
          target: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: install cargo-leptos
        run: cargo install cargo-leptos

      - name: install trunk
        run: cargo install trunk

      - name: install wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libboost-all-dev

      - name: Install boost (windows)
        if: matrix.platform == 'windows-latest'
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost-win
        with:
            boost_version: 1.85.0
            platform_version: 2022
            toolset: msvc

      - name: Install boost (mac)
        if: matrix.platform.os == 'macos-latest'
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost-mac
        with:
            boost_version: 1.85.0
            platform_version: 11
            toolset: clang

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
